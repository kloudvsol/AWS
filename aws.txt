AWS NOTES 

###
CIDR 
192.168.10.0/24

Subnet 
192.168.10.0/26 Private a
192.168.10.64/26 Private b
192.168.10.128/26 public a 
192.168.10.192/26 public b 

###

what is aws
AWS (Amazon Web Services) is a comprehensive and widely adopted cloud platform offered by Amazon. It provides a broad set of cloud-based products and services that help organizations and individuals develop, deploy, and manage applications and infrastructures. Here’s a breakdown of some of its key components:

Key Components of AWS:
Compute: Services like EC2 (Elastic Compute Cloud) that allow users to run virtual servers.

Storage: Options like S3 (Simple Storage Service) for scalable storage, and EBS (Elastic Block Store) for block storage.

Database: Services including RDS (Relational Database Service), DynamoDB (NoSQL database), and Redshift (data warehousing).

Networking: Tools like VPC (Virtual Private Cloud) and Route 53 for DNS services.

Content Delivery: Services like CloudFront, a CDN to deliver content globally with low latency.

Security: Features and services to protect data and infrastructure, such as IAM (Identity and Access Management) and AWS Shield for DDoS protection.

Machine Learning: Services like SageMaker for building, training, and deploying machine learning models.

DevOps Tools: Tools such as CodePipeline, CodeBuild, and CodeDeploy to enable continuous integration and delivery.

Benefits of AWS:
Scalability: Automatically scale resources up or down based on demand.

Flexibility: Wide range of tools and services to fit different needs and workloads.

Cost-Efficiency: Pay-as-you-go pricing model helps manage and optimize costs.

Security: Comprehensive security measures and compliance certifications.

Global Reach: Numerous data centers around the world for low latency and high availability.

AWS is used by businesses of all sizes and across various industries to enhance their IT infrastructure, improve efficiency, and innovate faster.

###

AWS (Amazon Web Services) offers various cloud computing models to meet different needs: Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS). Here’s a brief overview of each:

Infrastructure as a Service (IaaS):
Examples: EC2, EBS, VPC

IaaS provides virtualized computing resources over the internet. It allows you to rent IT infrastructure—servers, storage, and networking—on a pay-as-you-go basis. You have control over the operating systems, storage, and deployed applications, but AWS manages the infrastructure.

Platform as a Service (PaaS):
Examples: Elastic Beanstalk, AWS Lambda, AWS RDS

PaaS offers hardware and software tools over the internet. In this model, AWS provides the underlying infrastructure and platforms, allowing developers to focus on building and managing applications without worrying about underlying hardware, networking, and storage management.

Software as a Service (SaaS):
Examples: Amazon WorkSpaces, Amazon Chime, Amazon QuickSight

SaaS delivers software applications over the internet, on a subscription basis. AWS manages the infrastructure, platforms, and software, providing users with access to applications hosted in the cloud. Users can access the software from any device with an internet connection.

Key Differences:
IaaS: Provides virtualized computing resources, giving you the most control and flexibility.

PaaS: Offers a platform for developing, running, and managing applications, without dealing with underlying infrastructure.

SaaS: Delivers fully managed applications accessible over the internet, minimizing user responsibility.

Each of these models caters to different needs, offering various levels of control, flexibility, and management.


####

what is aws
AWS (Amazon Web Services) is a comprehensive and widely adopted cloud platform offered by Amazon. It provides a broad set of cloud-based products and services that help organizations and individuals develop, deploy, and manage applications and infrastructures. Here’s a breakdown of some of its key components:

Key Components of AWS:
Compute: Services like EC2 (Elastic Compute Cloud) that allow users to run virtual servers.

Storage: Options like S3 (Simple Storage Service) for scalable storage, and EBS (Elastic Block Store) for block storage.

Database: Services including RDS (Relational Database Service), DynamoDB (NoSQL database), and Redshift (data warehousing).

Networking: Tools like VPC (Virtual Private Cloud) and Route 53 for DNS services.

Content Delivery: Services like CloudFront, a CDN to deliver content globally with low latency.

Security: Features and services to protect data and infrastructure, such as IAM (Identity and Access Management) and AWS Shield for DDoS protection.

Machine Learning: Services like SageMaker for building, training, and deploying machine learning models.

DevOps Tools: Tools such as CodePipeline, CodeBuild, and CodeDeploy to enable continuous integration and delivery.

Benefits of AWS:
Scalability: Automatically scale resources up or down based on demand.

Flexibility: Wide range of tools and services to fit different needs and workloads.

Cost-Efficiency: Pay-as-you-go pricing model helps manage and optimize costs.

Security: Comprehensive security measures and compliance certifications.

Global Reach: Numerous data centers around the world for low latency and high availability.

AWS is used by businesses of all sizes and across various industries to enhance their IT infrastructure, improve efficiency, and innovate faster.

If you’d like to dive deeper into any specific AWS service or feature, feel free to let me know!

aw regions
AWS (Amazon Web Services) operates in multiple geographic regions around the world. Each region is a separate geographic area with multiple, isolated locations known as Availability Zones (AZs). Here are some of the key AWS regions:

North America
US East (Ohio): us-east-2

US East (N. Virginia): us-east-1

US West (Oregon): us-west-2

US West (N. California): us-west-1

Canada (Central): ca-central-1

GovCloud (US-West): us-gov-west-1

GovCloud (US-East): us-gov-east-1

South America
South America (São Paulo): sa-east-1

Europe
EU (Frankfurt): eu-central-1

EU (Ireland): eu-west-1

EU (London): eu-west-2

EU (Paris): eu-west-3

EU (Milan): eu-south-1

Middle East
Middle East (Bahrain): me-south-1

Africa
Africa (Cape Town): af-south-1

Asia Pacific
Asia Pacific (Tokyo): ap-northeast-1

Asia Pacific (Seoul): ap-northeast-2

Asia Pacific (Singapore): ap-southeast-1

Asia Pacific (Sydney): ap-southeast-2

Asia Pacific (Mumbai): ap-south-1

Asia Pacific (Hong Kong): ap-east-1

Australia
Australia (Sydney): au-southeast-2

China
China (Beijing): cn-north-1

China (Ningxia): cn-northwest-1

AWS regions are designed to be isolated from each other, providing high availability and fault tolerance. This means that if one region experiences an outage, it does not affect the other regions3.

###

AWS Availability Zones (AZs) are distinct locations within an AWS Region, engineered to be isolated from failures in other AZs. Each AZ consists of one or more discrete data centers, each with redundant power, networking, and connectivity, housed in separate facilities. These zones provide highly available, fault-tolerant services and applications by allowing users to distribute their infrastructure across multiple AZs within a region.

Key Points About AWS Availability Zones:
High Availability: By deploying applications across multiple AZs, you can achieve higher availability and fault tolerance.

Low Latency: AZs within a region are connected through low-latency, high-throughput, and highly redundant networking.

Data Durability: Services like Amazon S3 and Amazon RDS replicate data across multiple AZs to ensure durability.

Isolation: Each AZ is isolated from the others to prevent impact from failures in other zones.

How to Use Availability Zones:
Redundancy: Deploy instances and resources across multiple AZs to ensure redundancy.

Disaster Recovery: Design your applications to be resilient by failing over to another AZ in case of a disaster.

Load Balancing: Use services like Elastic Load Balancing (ELB) to distribute traffic across instances in different AZs.

For example, an application hosted in the us-east-1 region can be deployed across three AZs: us-east-1a, us-east-1b, and us-east-1c, providing redundancy and minimizing the impact of outages.

###

AWS VPC (Virtual Private Cloud) is a service that lets you provision a logically isolated section of the AWS cloud where you can launch AWS resources in a virtual network that you define. Here are some key points:

Key Features of AWS VPC:
Subnets: You can create subnets within your VPC to segment your network. Subnets can be public (accessible from the internet) or private (isolated from the internet).

Security: Control inbound and outbound traffic for your instances using Security Groups and Network ACLs.

Routing: Use Route Tables to control the traffic flow between subnets.

NAT Gateways and Instances: Allow instances in a private subnet to connect to the internet without being exposed to inbound traffic from the internet.

Peering: Establish a network connection between two VPCs to enable traffic routing between them.

VPN Connections: Connect your VPC to your on-premises network using an AWS VPN.

Gateway Endpoints: Provide reliable, scalable connectivity to services like S3 and DynamoDB without requiring an internet gateway.

Why Use AWS VPC?
Isolation: Provides an isolated environment within the AWS cloud.

Control: Gives full control over your virtual networking environment, including IP address range, subnets, route tables, and network gateways.

Security: Enhances security by enabling the use of security groups and network ACLs.

Flexibility: Allows you to create a multi-layered network with public and private subnets.

Scalability: Easily scale your network resources as your demands grow.

Setting Up an AWS VPC:
Create a VPC: Choose your IP address range.

Create Subnets: Define your subnets (public and private).

Set Up Route Tables: Configure routing between subnets and internet gateways.

Configure Security: Set up Security Groups and Network ACLs.

Launch Instances: Deploy EC2 instances within your VPC.

AWS VPC provides a highly customizable environment, enabling you to build a secure and scalable network infrastructure tailored to your specific needs.


###

An AWS Internet Gateway is a critical component in an Amazon Virtual Private Cloud (VPC) that allows communication between instances in your VPC and the internet. Here’s a detailed look at what it does and how you can use it:

Key Features and Functions:
Internet Connectivity: An Internet Gateway provides a target in your VPC route tables for internet-routable traffic. This allows instances in your VPC to communicate with the internet.

NAT Capabilities: It enables instances with private IP addresses to access the internet (e.g., for software updates) and prevents the internet from initiating connections with the instances.

High Availability and Redundancy: Internet Gateways are horizontally scaled, redundant, and highly available components of the VPC. There is no bandwidth constraint on an Internet Gateway.

How to Set Up an Internet Gateway:
Create an Internet Gateway: In the AWS Management Console, go to the VPC Dashboard and select “Internet Gateways.” Create a new Internet Gateway and attach it to your VPC.

Update Route Tables: Modify the route table associated with your subnet. Add a route that directs internet-bound traffic (0.0.0.0/0) to the Internet Gateway.

Assign Elastic IP Addresses: For instances that need to be reachable from the internet, assign Elastic IP addresses.

Example Use Case:
Public Subnet: Instances in a public subnet use the Internet Gateway to communicate with the internet. These instances can be web servers, bastion hosts, etc.

Private Subnet: Instances in a private subnet do not have direct access to the internet. They can use a NAT Gateway or NAT Instance to access the internet for updates or downloading data without being directly exposed.

Steps to Set Up an Internet Gateway:
Navigate to VPC Dashboard:

Open the VPC Dashboard in the AWS Management Console.

Create an Internet Gateway:

Click on "Internet Gateways" on the left-hand menu.

Click "Create Internet Gateway."

Provide a name and click "Create."

Attach Internet Gateway to VPC:

Select the created Internet Gateway.

Click "Actions" and choose "Attach to VPC."

Select your VPC and click "Attach Internet Gateway."

Update Route Table:

Go to the "Route Tables" section in the VPC Dashboard.

Select the route table associated with your public subnet.

Click on the "Routes" tab and select "Edit routes."

Add a new route with destination 0.0.0.0/0 and target the Internet Gateway.

Save the changes.


